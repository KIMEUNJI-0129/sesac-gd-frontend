.container {
  /* display: flex; 자식요소의 정렬 방법을 지정하는 속성 */
  /* display: inline-flex 속성도 있음 */
  /* flex와 inline-flex의 차이 */
  /* flex는 부모 요소가 수직으로 쌓임 block 요소처럼 */
  /* linline 요소는 부모 요소가 수평으로 쌓임 inlline 요소처럼 */

  /* display: flex; 는 기본적으로 자식 요소들이 왼쪽에서 오른쪽으로 쌓임 */
  /* 즉, 주축의 기본 방향이 좌 -> 우 */
  /* 주축 : main axis (flex-direction으로 설정한 축이 주축이 된다.) */
  /* 교차축 : cross axis (주축과 수직으로 만나는 축) */
  display: flex;
  width: 100vw;
  background-color: bisque;

  /* flex-direction 주축의 방향 지정, 시작점 변경 */
  /* flex-direction: row; (default) */
  /* row-reverse : 우->좌로 자식 요소들이 쌓임 */
  /* flex-direction: row-reverse; */

  /* column : 위->아래로 자식 요소들이 쌓임 */
  /* flex-direction: column; */
  /* column-reverse : 아래->위로 자식 요소들이 쌓임 */
  /* flex-direction: column-reverse; */

  /* flex-direction: row;
  width: 350px; */
  /* flex 속성 사용 시 컨테이너의 너비가 아이템들의 너비보다
  작을 때 줄바꿈을 지정 */
  /* flex-wrap: nowrap; (default) */
  /* flex-wrap: wrap;
  flex-wrap: wrap-reverse; */

  /* justyfy-content : 주축 아이템의 정렬 방법, 배치 방법 */
  /* 
  -justyfy-content: flex-start (default) -> 아이템을 start 지점을 기준으로 나열
  -justyfy-content: flex-end -> 아이템을 end 지점을 기준으로 나열
  -justyfy-content: space-around -> 아이템들의 모든 여백을 동일하게 갖도록 함(양끝 여백의 단위가 1이라면, 아이템 사이 여백은 2)
  -justyfy-content: space-evenly -> star부터 첫 아이템의 간격, 아이템 사이 간격, 마지막 아이템부터 end까지의 모든 간격이 동일
  -justyfy-content: space-between -> 처음과 마지막 아이템을 양 끝에 붙이고, 나머지 아이템 사이 간격을 동일하게 나눔
  */
  /* justify-content: flex-end; */
  /* flex-direction: row-reverse 와는 다르다! 콘텐츠의 순서가 바뀌지 않고, 정렬 방식만 달라지는 것. */

  /* justify-content: space-around;
  justify-content: space-evenly;
  justify-content: space-between; */

  /* align-items : 교차축에 대해 item을 어떻게 배치할 것인가 */
  /* 
  -align-items: stretch; (default) -> container의 교차축을 모두 채우기 위해 늘림
  -> 아이템의 높이 또는 너비가 지정되지 않았을 때, 자동으로 교차축을 채우기 위해 늘어남.
  
  -align-items: flex-start; -> 교차축의 시작점으로 정렬
  -> 아이템의 높이나 너비가 지정되었을 때, 자동으로 정렬됨
  -align-items: flex-end; -> 교차축의 끝점 정렬
  -align-items: center; -> 교차축의 중앙에 정렬
  -align-items: baseline; -> 아이템을 텍스트의 베이스라인 기준으로 정렬
  */
  height: 500px;
  /* align-items: flex-start;
  align-items: center;
  align-items: baseline; */

  /* align-content -> 줄 바꿈이 일어난 경우, 두 줄 이상에서 교차축 기준으로 아이템들을 뭉쳐서 정렬하는 방법 */
  /* 조건 : flex-wrap: wrap; 상태에서 아이템이 2줄 이상일 때 교차축 방향을 설정 */
  /* 
  -align-content : stretch; (default) -> 교차축 방향으로 모두 차지하기 위해 늘어남
  -align-content : flex-start; -> 교차축 방향으로 시작점으로 정렬
  -align-content : flex-end; -> 교차축 방향으로 끝점으로 정렬
  -align-content : center; -> 교차축 방향으로 중앙에 정렬
  */

  /* 아이템보다 작은 컨테이너가 있어야 기능을 한다.
  무조건적으로 flex-wrap과 함께 width 설정을 써야 한다. */
  /* align들은 언제나 교차축을 기준으로 움직인다!!
  교차축은 flex-direction으로 결정된 주축에 따라 상대적으로 결정된다. */
  width: 350px;
  flex-wrap: wrap;
  align-items: flex-start;
  /* align-content: flex-start; */
  /* align-content: flex-end; */
  /* align-content: center; */
  flex-direction: column;
}

/* .item {
  width: 100px;
  height: 100px;
  font-size: 30px;
  text-align: center;
  line-height: 100px;
} */

.container .item1 {
  /* font-size: 20px; */
  background-color: red;
}

.container .item2 {
  /* font-size: 40px; */
  background-color: blue;
}

.container .item3 {
  background-color: green;
}

.container .item4 {
  background-color: yellow;
}

.container .item5 {
  background-color: pink;
}

.container .item6 {
  background-color: aqua;
}

.container .item7 {
  background-color: orange;
}

.container .item8 {
  background-color: violet;
}

/* 아이템 속성 */
.container2 {
  background-color: grey;
  width: 100%;
  height: 400px;
  display: flex;
  align-items: center;
}

.container2 .item {
  /* width: 50px; */
  height: 50px;
}

.container2 .item1 {
  background-color: lightblue;
}

.container2 .item2 {
  background-color: lightcoral;
  align-self: flex-start;
  order: -1;
}

.container2 .item3 {
  background-color: lightcyan;
  flex-basis: 100px;
  flex-grow: 1;
}

.container2 .item4 {
  background-color: lightgreen;
  align-self: flex-end;
  flex-grow: 2;
}

.container2 .item5 {
  background-color: lightpink;
}
